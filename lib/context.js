// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, PutConfig, Start, Stop, Update, assert, getPromise, needle, schema_kaspersky, validate;

  validate = require('json-schema').validate;

  assert = require('assert');

  Promise = require('bluebird');

  needle = Promise.promisifyAll(require('needle'));

  schema_kaspersky = require('./schema').kaspersky;

  getPromise = function() {
    return new Promise(function(resolve, reject) {
      return resolve();
    });
  };

  PutConfig = function(baseUrl, id, config) {
    return needle.putAsync(baseUrl + ("/corenova/" + id + "/transform/include"), config, {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        return config;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Start = function(context) {
    var config, id;
    if (!(context.bInstalledPackages && context.service.name && context.service.config)) {
      throw new Error('openvpn-storm.Start missingParams');
    }
    config = context.service.config;
    config.HAVE_KASPERSKY = true;
    id = "500eb587-2731-493a-8afa-ffcefee3bee2";
    return getPromise().then((function(_this) {
      return function(resp) {
        return PutConfig(context.baseUrl, id, config);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        console.log(resp);
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Stop = function(context) {
    var config, id;
    if (!(context.bInstalledPackages && context.service.name && context.service.config)) {
      throw new Error('openvpn-storm.Start missingParams');
    }
    config = context.service.config;
    config.HAVE_KASPERSKY = false;
    id = "500eb587-2731-493a-8afa-ffcefee3bee2";
    return getPromise().then((function(_this) {
      return function(resp) {
        return PutConfig(context.baseUrl, id, config);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        console.log(resp);
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Update = function(context) {
    var config, id;
    if (!(context.bInstalledPackages && context.service.name && context.service.config)) {
      throw new Error('openvpn-storm.Start missingParams');
    }
    config = context.service.config;
    id = "500eb587-2731-493a-8afa-ffcefee3bee2";
    return getPromise().then((function(_this) {
      return function(resp) {
        return PutConfig(context.baseUrl, id, config);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        console.log(resp);
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };


  /*
  #input to the validate is  { config:{}}
  Validate =  (config) ->
      throw new Error "openvpn.Validate - invalid input" unless config.servers? and config.clients?
      for server in config.servers
          chk = validate server.config, schema['server']        
          console.log 'server validate result ', chk
          unless chk.valid
              throw new Error "server schema check failed"+  chk.valid
              return  false
          if server.users?
              for user in server.users 
                  chk = validate user, schema['user']        
                  console.log 'user validate result ', chk
                  unless chk.valid
                      throw new Error "user schema check failed"+  chk.valid
                      return  false
  
      for client in config.clients
          chk = validate client.config, schema['client']        
          console.log 'client validate result ', chk
          unless chk.valid
              throw new Error "client schema check failed"+  chk.valid
              return  false
  
      return true
   */

  module.exports.start = Start;

  module.exports.stop = Stop;

  module.exports.update = Update;

}).call(this);
