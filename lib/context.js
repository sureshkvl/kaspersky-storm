// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, PutConfig, Start, Stop, Update, UpdateKAVRepo, Validate, assert, getCorenovaID, getPromise, needle, schema_kaspersky, validate;

  validate = require('json-schema').validate;

  assert = require('assert');

  Promise = require('bluebird');

  needle = Promise.promisifyAll(require('needle'));

  schema_kaspersky = require('./schema').kaspersky;

  getPromise = function() {
    return new Promise(function(resolve, reject) {
      return resolve();
    });
  };

  getCorenovaID = function(baseUrl) {
    return needle.getAsync(baseUrl + "/corenova", {
      json: true
    }).then((function(_this) {
      return function(resp) {
        var corenovas;
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        corenovas = resp[0].body;
        return corenovas[0].id;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  UpdateKAVRepo = function(baseUrl) {
    var config, data, kavpersonality, kavrepo, personality, ref;
    config = require('../package.json').config;
    kavrepo = (ref = config.kav_repo) != null ? ref : "http://repo.dev.intercloud.net/kav";
    data = new Buffer(kavrepo).toString('base64');
    personality = {};
    personality.personality = [];
    kavpersonality = {
      "path": "/etc/kav_repo",
      "contents": data,
      "postxfer": "/usr/sbin/kav_update"
    };
    personality.personality.push(kavpersonality);
    return needle.postAsync(baseUrl + "/personality", personality, {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        return true;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  PutConfig = function(baseUrl, id, config) {
    return needle.putAsync(baseUrl + ("/corenova/" + id + "/transform/include"), config, {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        return config;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Start = function(context) {
    var config, configObj, kavconfig, ref;
    if (!(context.bInstalledPackages && context.service.name)) {
      throw new Error('openvpn-storm.Start missingParams');
    }
    configObj = (ref = context.service.factoryConfig) != null ? ref.config : void 0;
    config = configObj[context.service.name];
    if (config.enable && config.coreConfig) {
      kavconfig = config.coreConfig;
    }
    if (!kavconfig) {
      throw new Error('openvpn-storm.Start missingParams -coreConfig');
    }
    kavconfig.HAVE_KASPERSKY = true;
    return getPromise().then((function(_this) {
      return function(resp) {
        return UpdateKAVRepo(context.baseUrl);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return getCorenovaID(context.baseUrl);
      };
    })(this)).then((function(_this) {
      return function(corenovaid) {
        return PutConfig(context.baseUrl, corenovaid, kavconfig);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Stop = function(context) {
    var config, configObj, kavconfig, ref;
    if (!(context.bInstalledPackages && context.service.name && context.service.factoryConfig)) {
      throw new Error('openvpn-storm.Stop missingParams');
    }
    configObj = (ref = context.service.factoryConfig) != null ? ref.config : void 0;
    config = configObj[context.service.name];
    if (config.enable && config.coreConfig) {
      kavconfig = config.coreConfig;
    }
    if (!kavconfig) {
      throw new Error('openvpn-storm.Stop missingParams -coreConfig');
    }
    kavconfig.HAVE_KASPERSKY = false;
    return getPromise().then((function(_this) {
      return function(resp) {
        return getCorenovaID(context.baseUrl);
      };
    })(this)).then((function(_this) {
      return function(corenovaid) {
        return PutConfig(context.baseUrl, corenovaid, kavconfig);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Update = function(context) {
    var config, configObj, kavconfig;
    if (!(context.bInstalledPackages && context.service.name && context.policyConfig)) {
      throw new Error('openvpn-storm.Start missingParams');
    }
    configObj = context.policyConfig;
    config = configObj[context.service.name];
    if (config.enable && config.coreConfig) {
      kavconfig = config.coreConfig;
    }
    if (!kavconfig) {
      throw new Error('openvpn-storm.Update missingParams -policyConfig');
    }
    return getPromise().then((function(_this) {
      return function(resp) {
        return getCorenovaID(context.baseUrl);
      };
    })(this)).then((function(_this) {
      return function(corenovaid) {
        return PutConfig(context.baseUrl, corenovaid, kavconfig);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Validate = function(config) {
    var chk, policyConfig;
    if (config == null) {
      throw new Error("kaspersky.Validate - invalid input");
    }
    policyConfig = {};
    if (config.enable && config.coreConfig) {
      policyConfig = config.coreConfig;
    }
    chk = validate(policyConfig, schema_kaspersky);
    console.log('server validate result ', chk);
    if (!chk.valid) {
      throw new Error("server schema check failed" + chk.valid);
      return false;
    } else {
      return true;
    }
  };

  module.exports.start = Start;

  module.exports.stop = Stop;

  module.exports.update = Update;

  module.exports.validate = Validate;

}).call(this);
